 
        private bool IsResetPasswordLinkVerified(string token)
        {
            var usertokenData = _db.User_ResetPassword_Tokens.FirstOrDefault(x => x.Token == token);
            //return true;
            return usertokenData.IsVerified;
        }

        
        private void currentLinkVerified(string token)// after all work done
        {
            var usertokenData = _db.User_ResetPassword_Tokens.FirstOrDefault(x => x.Token == token);
            if (usertokenData != null)
            {
                usertokenData.IsVerified = true;
                usertokenData.IsExpired = true;
                usertokenData.ModifiedDateTime = DateTime.Now;
                _db.SaveChanges();
            }
        }

        private void OldTokenExpired(string emailId,int skip)
        {
            var usertokenData =  _db.User_ResetPassword_Tokens.Where(x => x.EmailId.ToLower() == emailId.ToLower() && !x.IsExpired).OrderByDescending(x => x.CreatedDateTime).Skip(skip).ToList();
            if (usertokenData != null)
            {
                usertokenData.ForEach(x => { x.IsExpired = true; x.ModifiedDateTime = DateTime.Now; });
                _db.SaveChanges();
            }
        }

        private bool IscurrentTokenExpired(string token)
        {
            bool currentTokenIsExpired = _db.User_ResetPassword_Tokens.Where(x => x.Token == token).FirstOrDefault().IsExpired;
            return currentTokenIsExpired;
        }
        private bool TokenSessionTimeExpired(string token)
        {
            var usertokenData = _db.User_ResetPassword_Tokens.FirstOrDefault(x => x.Token == token);
            if(usertokenData!=null)
            {
              DateTime currentTime = DateTime.Now;
              int timeDiffrence = (currentTime - usertokenData.CreatedDateTime).Minutes;
              if (timeDiffrence > 3)
              {
                  usertokenData.IsExpired = true;
                    usertokenData.ModifiedDateTime = DateTime.Now;
                  _db.SaveChanges();
                  return true;
              }
            }
            return false;
        }
